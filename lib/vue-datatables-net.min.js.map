{"version":3,"file":"vue-datatables-net.min.js","sources":["../src/VdtnetTable.vue"],"sourcesContent":["<template>\n  <div class=\"vdtnet-container\">\n    <div class=\"container-fluid vdtnet-head\"><slot name=\"HEAD\" /></div>\n    <div class=\"vtdnet-body\">\n      <table\n        v-once\n        ref=\"table\"\n        :class=\"className\"\n      >\n        <thead>\n          <tr>\n            <th\n              v-for=\"(field, i) in options.columns\"\n              :key=\"i\"\n            >\n              <slot\n                :name=\"`HEAD_${field.name}`\"\n                :field=\"field\"\n                :i=\"i\"\n              >\n                <div\n                  :class=\"field.className\"\n                  v-html=\"field.title\" />\n              </slot>\n            </th>\n          </tr>\n        </thead>\n      </table>\n    </div>\n    <div class=\"container-fluid vdtnet-foot\"><slot name=\"FOOT\" /></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'VdtnetTable',\n  props: {\n    className: {\n      type: String,\n      default: 'table table-striped table-bordered dt-responsive nowrap w-100'\n    },\n    url: {\n      type: String\n    },\n    opts: {\n      type: Object\n    },\n    fields: {\n      type: Object\n    },\n    jquery: {\n      type: Object\n    }\n  },\n  data() {\n    // initialize defaults\n    return {\n      options: {\n        dom: '<\\'row\\'<\\'col-sm-12 col-md-4\\'l><\\'text-right col-sm-12 col-md-6\\'B><\\'col-sm-12 col-md-2\\'f>>' +\n          '<\\'row\\'<\\'col-sm-12\\'tr>>' +\n          '<\\'row\\'<\\'col-sm-12 col-md-5\\'i><\\'col-sm-12 col-md-7\\'p>>',\n        columns: [],\n        buttons: []  // remove any button defaults\n      },\n      dataTable: null\n    }\n  },\n  mounted() {\n    const vm = this\n    const jq = vm.jquery || window.jQuery\n\n    // allow user to override default options\n    if (vm.opts) {\n      vm.options = jq.extend({}, vm.options, vm.opts)\n    }\n\n    if (vm.url) {\n      vm.options.ajax = vm.url\n    }\n\n    // if fields are passed in, generate column definition\n    // from our custom fields schema\n    if (vm.fields) {\n      const fields = vm.fields\n      const cols   = vm.options.columns\n\n      for (let k in fields) {\n        const field = fields[k]\n        field.name = field.name || k\n\n        // generate\n        let col = {\n          searchable: field.searchable,\n          defaultContent: '',\n          title: field.label || k,\n          width: field.width,\n          data: field.name,\n          visible: field.visible,\n          className: field.className\n        }\n\n        if (field.width) {\n          col.width = field.width\n        }\n\n        if (field.sortable) {\n          col.orderable = field.sortable\n        }\n\n        if (field.render) {\n          col.render = field.render\n        }\n        // console.log(col)\n\n        cols.push(col)\n      }\n    }\n\n    const $el = jq(vm.$refs.table)\n    vm.dataTable = $el.DataTable(vm.options)\n\n    // wire up edit, delete, and/or action buttons\n    $el.on('click', '[data-action]', (e) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const target = jq(e.target)\n      let that     = target\n      let action   = that.attr('data-action')\n      while(!action) {\n        // don't let it propagate outside of container\n        if (that.hasClass('vdtnet-container')) {\n          // no action, simply exit\n          return\n        }\n        that   = that.parent()\n        action = that.attr('data-action')\n      }\n\n      // only emit if there is action\n      if (action) {\n        // detect if row action\n        let tr = that.closest('tr')\n        if (tr) {\n          if (tr.hasClass('child')) {\n            tr = tr.prev()\n          }\n          const row  = vm.dataTable.row(tr)\n          const data = row.data()\n          vm.$emit(action, {data, row, that})\n        } else {\n          // not a row click, must be other kind of action\n          // such as bulk, csv, pdf, etc...\n          vm.$emit(action, {target})\n        }\n      }\n    })\n  }\n}\n</script>\n"],"names":[],"mappings":";;;;;4LAkCA"}